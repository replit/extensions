[
  {
    "name": "init",
    "description": "The `init()` method initializes the Extension, establishes a handshake with the Repl, and adds an event listener to the window object. It takes as an argument an object containing optional parameters for the initialization process. It returns a function that removes the event listener added to the window object.",
    "typeNames": ["ReplitInitArgs", "ReplitInitOutput", "HandshakeStatus"]
  },
  {
    "name": "fs",
    "description": "The fs or filesystem API allows you to create, read, and modify files on the repl's filesystem.",
    "typeNames": [
      "WatchFileListeners",
      "WatchTextFileListeners",
      "WatchFileOnChangeListener",
      "WatchFileOnErrorListener",
      "WatchFileOnMoveOrDeleteListener",
      "WatchTextFileOnReadyListener",
      "WatchTextFileOnChangeListener",
      "WatchTextFileOnErrorListener",
      "WatchTextFileOnMoveOrDeleteListener",
      "FsNode",
      "FsNodeType",
      "FsNodeArray",
      "TextFileReadyEvent",
      "WriteChange",
      "GetLatestContent",
      "MoveEvent",
      "DeleteEvent",
      "TextFileWatcherReadyEvent",
      "TextFileWatcherOnChangeEvent",
      "TextChange",
      "TextFileOnChangeEvent",
      "WatchDirListeners",
      "WatchDirOnErrorListener",
      "WatchDirOnChangeListener",
      "WatchDirOnMoveOrDeleteListener",
      "ChangeEventType",
      "FsMoveEvent",
      "FsDeleteEvent",
      "DisposerFunction",
      "DirectoryChildNode"
    ]
  },
  {
    "name": "replDb",
    "description": "ReplDB is a simple key-value store available on all repls by default. Extensions can use ReplDB to store repl specific data.",
    "typeNames": ["NullableStrError", "StrError"]
  },
  {
    "name": "messages",
    "description": "The messages API allows you to send custom notices in the Replit workspace.",
    "typeNames": []
  },
  {
    "name": "data",
    "description": "The data API allows you to get information and metadata exposed from Replit's GraphQL API.",
    "typeNames": [
      "UserDataInclusion",
      "ReplDataInclusion",
      "UserQueryOutput",
      "UserByUsernameQueryOutput",
      "ReplQueryOutput",
      "GraphResponse",
      "User",
      "Repl",
      "Tag",
      "ReplComment",
      "UserSocial",
      "UserSocialType",
      "UserRole",
      "ReplOwner",
      "ReplCommentConnection",
      "CurrentUserDataInclusion",
      "EditorPreferences",
      "CurrentUser",
      "CurrentUserQueryOutput"
    ]
  },
  {
    "name": "session",
    "description": "The session api provides you with information on the current user's coding session in the workspace.",
    "typeNames": ["OnActiveFileChangeListener", "DisposerFunction"]
  },
  {
    "name": "themes",
    "description": "The themes api allows you to access the current user's theme and utilize the color tokens accordingly.",
    "typeNames": [
      "ThemeValuesGlobal",
      "ColorScheme",
      "CustomTheme",
      "ThemeSyntaxHighlightingTag",
      "ThemeSyntaxHighlightingModifier",
      "ThemeEditorSyntaxHighlighting",
      "ThemeValuesEditor",
      "ThemeValues",
      "ThemeVersion",
      "DisposerFunction",
      "OnThemeChangeListener"
    ]
  },
  {
    "name": "me",
    "description": "The `me` api module exposes information specific to the current extension.",
    "typeNames": []
  },
  {
    "name": "exec",
    "description": "The `exec` api module allows you to execute arbitrary shell commands.",
    "typeNames": [
      "ExecResult",
      "SpawnOptions",
      "SpawnOutput",
      "SpawnResult",
      "SplitStderrSpawnOptions",
      "CombinedStderrSpawnOptions",
      "BaseSpawnOptions",
      "OutputStrCallback"
    ],
  },
  {
    "name": "editor",
    "description": "The `editor` api module allows you to get the current user's editor preferences.",
    "experimental": true,
    "typeNames": ["EditorPreferences"]
  }
]
